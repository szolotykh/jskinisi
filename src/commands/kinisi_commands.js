// ----------------------------------------------------------------------------
// Kinisi motr controller commands.
// This file is auto generated by the commands generator from JSON file.
// Do not edit this file manually.
// Timestamp: 2023-09-29 00:09:00
// Version: 1.0.1
// ----------------------------------------------------------------------------

const INITIALIZE_MOTOR = 0x01
const SET_MOTOR_SPEED = 0x02
const INITIALIZE_MOTOR_CONTROLLER = 0x03
const SET_MOTOR_TARGET_VELOCITY = 0x04
const DELETE_MOTOR_CONTROLLER = 0x05
const INITIALIZE_ENCODER = 0x11
const GET_ENCODER_VALUE = 0x12
const INITIALIZE_GPIO_PIN = 0x20
const SET_GPIO_PIN_STATE = 0x21
const GET_GPIO_PIN_STATE = 0x22
const TOGGLE_GPIO_PIN_STATE = 0x23
const SET_STATUS_LED_STATE = 0x25
const TOGGLE_STATUS_LED_STATE = 0x26
const INITIALIZE_PLATFORM = 0x30
const SET_PLATFORM_VELOCITY_INPUT = 0x31
const SET_PLATFORM_CONTROLLER = 0x32

class Commands {
    async write(buffer) {
        throw new Error("write method must be implemented");
    }

    async read(numBytes) {
        throw new Error("read method must be implemented");
    }

    async initialize_motor(motor_index){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x01);  // Command byte
        view.setUint8(2, motor_index);  // motor_index
        await this.write(buffer);
    }

    async set_motor_speed(motor_index, direction, speed){
        const messageLength = 5;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x02);  // Command byte
        view.setUint8(2, motor_index);  // motor_index
        view.setUint8(3, direction);  // direction
        view.setUint16(4, speed, true);  // speed
        await this.write(buffer);
    }

    async initialize_motor_controller(motor_index, kp, ki, kd){
        const messageLength = 26;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x03);  // Command byte
        view.setUint8(2, motor_index);  // motor_index
        view.setFloat64(3, kp, true);  // kp
        view.setFloat64(11, ki, true);  // ki
        view.setFloat64(19, kd, true);  // kd
        await this.write(buffer);
    }

    async set_motor_target_velocity(motor_index, direction, speed){
        const messageLength = 5;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x04);  // Command byte
        view.setUint8(2, motor_index);  // motor_index
        view.setUint8(3, direction);  // direction
        view.setUint16(4, speed, true);  // speed
        await this.write(buffer);
    }

    async delete_motor_controller(motor_index){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x05);  // Command byte
        view.setUint8(2, motor_index);  // motor_index
        await this.write(buffer);
    }

    async initialize_encoder(encoder_index){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x11);  // Command byte
        view.setUint8(2, encoder_index);  // encoder_index
        await this.write(buffer);
    }

    async get_encoder_value(encoder_index){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x12);  // Command byte
        view.setUint8(2, encoder_index);  // encoder_index
        await this.write(buffer);
        const result = await this.read(4)
        const dataView = new DataView(result, 0);
        return dataView.getUint32(0, true);
    }

    async initialize_gpio_pin(pin_number, mode){
        const messageLength = 3;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x20);  // Command byte
        view.setUint8(2, pin_number);  // pin_number
        view.setUint8(3, mode);  // mode
        await this.write(buffer);
    }

    async set_gpio_pin_state(pin_number, state){
        const messageLength = 3;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x21);  // Command byte
        view.setUint8(2, pin_number);  // pin_number
        view.setUint8(3, state);  // state
        await this.write(buffer);
    }

    async get_gpio_pin_state(pin_number){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x22);  // Command byte
        view.setUint8(2, pin_number);  // pin_number
        await this.write(buffer);
        const result = await this.read(1)
        const dataView = new DataView(result, 0);
        return dataView.getUint8(0);
    }

    async toggle_gpio_pin_state(pin_number){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x23);  // Command byte
        view.setUint8(2, pin_number);  // pin_number
        await this.write(buffer);
    }

    async set_status_led_state(state){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x25);  // Command byte
        view.setUint8(2, state);  // state
        await this.write(buffer);
    }

    async toggle_status_led_state(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x26);  // Command byte
        await this.write(buffer);
    }

    async initialize_platform(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x30);  // Command byte
        await this.write(buffer);
    }

    async set_platform_velocity_input(x, y, t){
        const messageLength = 4;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x31);  // Command byte
        view.setInt8(2, x);  // x
        view.setInt8(3, y);  // y
        view.setInt8(4, t);  // t
        await this.write(buffer);
    }

    async set_platform_controller(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x32);  // Command byte
        await this.write(buffer);
    }

}