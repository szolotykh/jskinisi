// ----------------------------------------------------------------------------
// Kinisi motr controller commands.
// This file is auto generated by the commands generator from JSON file.
// Do not edit this file manually.
// Timestamp: 2023-09-12 20:01:00
// Version: 1.0.0
// ----------------------------------------------------------------------------

const INITIALIZE_MOTOR = 0x01
const SET_MOTOR_SPEED = 0x02
const SET_MOTOR_CONTROLLER = 0x03
const SET_MOTOR_TARGET_VELOCITY = 0x04
const DELETE_MOTOR_CONTROLLER = 0x05
const INITIALIZE_ENCODER = 0x11
const GET_ENCODER_VALUE = 0x12
const SET_PIN_LOW = 0x20
const SET_PIN_HIGH = 0x21
const TOGGLE_PIN = 0x22
const SET_STATUS_LED_OFF = 0x23
const SET_STATUS_LED_ON = 0x24
const TOGGLE_STATUS_LED = 0x25
const INITIALIZE_PLATFORM = 0x30
const SET_PLATFORM_VELOCITY_INPUT = 0x31
const SET_PLATFORM_CONTROLLER = 0x32

const MotorIndex = {
    Motor0: 0,
    Motor1: 1,
    Motor2: 2,
    Motor3: 3,
}

const EncoderIndex = {
    Encoder0: 0,
    Encoder1: 1,
    Encoder2: 2,
    Encoder3: 3,
}

class Commands {
    async write(buffer) {
        throw new Error("write method must be implemented");
    }

    async read(numBytes) {
        throw new Error("read method must be implemented");
    }

    async initialize_motor(motorIndex){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x01);  // Command byte
        view.setUint8(2, motorIndex);  // motorIndex
        await this.write(buffer);
    }

    async set_motor_speed(motorIndex, direction, speed){
        const messageLength = 5;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x02);  // Command byte
        view.setUint8(2, motorIndex);  // motorIndex
        view.setUint8(3, direction);  // direction
        view.setUint16(4, speed, true);  // speed
        await this.write(buffer);
    }

    async set_motor_controller(motorIndex, kp, ki, kd){
        const messageLength = 26;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x03);  // Command byte
        view.setUint8(2, motorIndex);  // motorIndex
        view.setFloat64(3, kp, true);  // kp
        view.setFloat64(11, ki, true);  // ki
        view.setFloat64(19, kd, true);  // kd
        await this.write(buffer);
    }

    async set_motor_target_velocity(motorIndex, direction, speed){
        const messageLength = 5;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x04);  // Command byte
        view.setUint8(2, motorIndex);  // motorIndex
        view.setUint8(3, direction);  // direction
        view.setUint16(4, speed, true);  // speed
        await this.write(buffer);
    }

    async delete_motor_controller(motorIndex){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x05);  // Command byte
        view.setUint8(2, motorIndex);  // motorIndex
        await this.write(buffer);
    }

    async initialize_encoder(encoderIndex){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x11);  // Command byte
        view.setUint8(2, encoderIndex);  // encoderIndex
        await this.write(buffer);
    }

    async get_encoder_value(encoderIndex){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x12);  // Command byte
        view.setUint8(2, encoderIndex);  // encoderIndex
        await this.write(buffer);
        return await this.read(4)
    }

    async set_pin_low(pinNumber){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x20);  // Command byte
        view.setUint8(2, pinNumber);  // pinNumber
        await this.write(buffer);
    }

    async set_pin_high(pinNumber){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x21);  // Command byte
        view.setUint8(2, pinNumber);  // pinNumber
        await this.write(buffer);
    }

    async toggle_pin(pinNumber){
        const messageLength = 2;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x22);  // Command byte
        view.setUint8(2, pinNumber);  // pinNumber
        await this.write(buffer);
    }

    async set_status_led_off(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x23);  // Command byte
        await this.write(buffer);
    }

    async set_status_led_on(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x24);  // Command byte
        await this.write(buffer);
    }

    async toggle_status_led(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x25);  // Command byte
        await this.write(buffer);
    }

    async initialize_platform(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x30);  // Command byte
        await this.write(buffer);
    }

    async set_platform_velocity_input(x, y, t){
        const messageLength = 4;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x31);  // Command byte
        view.setInt8(2, x);  // x
        view.setInt8(3, y);  // y
        view.setInt8(4, t);  // t
        await this.write(buffer);
    }

    async set_platform_controller(){
        const messageLength = 1;
        const buffer = new ArrayBuffer(messageLength + 1);
        const view = new DataView(buffer);
        view.setUint8(0, messageLength);  // Message length
        view.setUint8(1, 0x32);  // Command byte
        await this.write(buffer);
    }

}